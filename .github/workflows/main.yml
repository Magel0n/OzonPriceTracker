name: Quality Requirements Satisfaction

on: [push]

jobs:
  pytest:
    runs-on: ubuntu-latest
    name: Running pytest, coverage reports
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install poetry
        uses: abatilo/actions-poetry@v4

      - name: Install dependencies
        run: poetry install

      - name: pytesting
        run: |
          poetry run pytest -s --cov=app/ test/
          poetry run pytest -s --cov=app/ --cov-branch test/
          poetry run coverage report --fail-under=60

  mutation:
    runs-on: ubuntu-latest
    name: mutmut testing
    needs: pytest  
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install poetry
        uses: abatilo/actions-poetry@v4

      - name: Install dependencies
        run: poetry install

      - name: Run mutation tests
        run: |
          poetry run mutmut run --paths-to-mutate app/database.py --runner "pytest test/test_database.py -x"
          
      - name: Show mutation results
        run: |
          poetry run mutmut results

  lint:
    runs-on: ubuntu-latest
    name: Linting with flake8 and ruff
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13'
          cache: 'pip'

      - name: Install poetry
        uses: abatilo/actions-poetry@v4

      - name: flake8 Lint
        uses: py-actions/flake8@v2
        with:
          args: "--exclude=test/*"

      - name: Ruff Lint
        uses: astral-sh/ruff-action@v3
        with:
          version: "0.11.8"
          config: "ruff.toml"


  security:
    runs-on: ubuntu-latest
    name: Security checks via bandit, snyk
    steps:
      - name: Checkout the Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install poetry
        uses: abatilo/actions-poetry@v4

      - name: Poetry preparation
        run: poetry install

      - name: Run Bandit
        run: poetry run bandit -r app/ -x test/

      - name: Install Snyk
        run: npm install -g snyk

      - name: Authenticate Snyk
        run: snyk auth ${{ secrets.SNYK_TOKEN }}
        if: always()

      - name: Run Snyk for only severe vulnerabilities
        uses: snyk/actions/python@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --all-projects --exclude=test

  performance:
    runs-on: ubuntu-latest
    name: Performance checks via locust
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: 'pip'

      - name: Install poetry
        uses: abatilo/actions-poetry@v4

      - name: Poetry preparation
        run: poetry install

      - uses: JarvusInnovations/background-action@v1
        name: Run app
        env:
          TG_BOT_TOKEN: ${{ secrets.TG_BOT_TOKEN }}
        with:
          run: |
            poetry run python app/api.py
            
          wait-on: |
            http-get://localhost:12345/alive

          wait-for: 30s

      - name: Run Load Test
        run: |
          locust --headless -u 50 --run-time 30s --stop-timeout 5s --host http://localhost:12345

  deploy:
    runs-on: ubuntu-latest
    needs: [pytest, lint, security, performance]
    steps:
      - run: echo "This is where Deployment should happen"